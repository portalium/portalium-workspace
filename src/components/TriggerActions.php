<?php

namespace portalium\workspace\components;

use portalium\base\Event;
use portalium\site\models\Setting;
use portalium\user\models\User;
use portalium\workspace\models\Workspace;
use portalium\workspace\models\WorkspaceUser;
use portalium\workspace\Module;
use Yii;
use yii\base\BaseObject;

class TriggerActions extends BaseObject
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function onRoleDeleteBefore($event)
    {
        ['item' => $item] = $event->payload;

        $this->deleteWorkspaceUserRoles($item->name);
    }

    private function deleteWorkspaceUserRoles($roleName)
    {
        $workspaceUserRoles = WorkspaceUser::find()->where(['role' => $roleName])->all();

        foreach ($workspaceUserRoles as $workspaceUserRole) {
            $workspaceUserRole->delete();
        }
    }

    public function onRoleUpdateBefore($event)
    {
        ['item' => $item, 'oldItem' => $oldItem] = $event->payload;


        $this->updateWorkspaceUserRoles($item->name, $oldItem->name);
    }

    private function updateWorkspaceUserRoles($roleName, $oldRoleName)
    {
        $workspaceUserRoles = WorkspaceUser::find()->where(['role' => $oldRoleName])->all();

        foreach ($workspaceUserRoles as $workspaceUserRole) {
            $workspaceUserRole->role = $roleName;
            $workspaceUserRole->save();
        }
    }

    public function onSettingUpdateAfter($event)
    {
        ['data' => $data, 'changedAttributes' => $changedAttributes] = $event->payload;

        if ($data['name'] == 'workspace::available_roles') {
            $oldRoles = [];
            if (isset($changedAttributes['value'])) {
                foreach (json_decode($changedAttributes['value']) as $module => $roles) {
                    foreach ($roles as $role) {
                        $oldRoles[] = [
                            'module' => $module,
                            'role' => $role
                        ];
                    }
                }
            }
            $newRoles = [];
            if (isset($data['value'])) {
                foreach (json_decode($data['value']) as $module => $roles) {
                    foreach ($roles as $role) {
                        $newRoles[] = [
                            'module' => $module,
                            'role' => $role
                        ];
                    }
                }
            }


            $deletedRoles = [];
            foreach ($oldRoles as $oldRole) {
                if (!in_array($oldRole, $newRoles)) {
                    $deletedRoles[] = $oldRole;
                }
            }

            Event::trigger(Yii::$app->getModules(), Module::EVENT_ROLE_UPDATE_AFTER, new Event(['payload' => [
                'deletedRoles' => $deletedRoles
            ]]));
        }
    }

    public function onUserCreateAfter($event)
    {
        ['id' => $id_user] = $event->payload;
        $user = User::findOne($id_user);
        $workspaceModel = new Workspace();
        $workspaceModel->name = strtolower($user->username) . 'workspace';
        $workspaceModel->title = 'Home';
        $workspaceModel->id_user = $user->id_user;
        if(!$workspaceModel->save()){
            Yii::error($workspaceModel->errors);
        }
        Event::trigger(Yii::$app->getModules(), Module::EVENT_USER_CREATE_AFTER, new Event(['payload' => [
            'id_user' => $id_user,
            'id_workspace' => $workspaceModel->id_workspace
        ]]));
    }
}
